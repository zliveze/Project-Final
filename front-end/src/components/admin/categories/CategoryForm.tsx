import { useState, useEffect, ChangeEvent } from 'react';
import { FiUpload, FiX } from 'react-icons/fi';
import Image from 'next/image';
import { Category } from './CategoryTable';

interface CategoryFormProps {
  initialData?: Partial<Category>;
  categories: Category[];
  onSubmit: (data: Partial<Category>) => void;
  onCancel: () => void;
  isSubmitting?: boolean;
}

export default function CategoryForm({
  initialData,
  categories,
  onSubmit,
  onCancel,
  isSubmitting = false
}: CategoryFormProps) {
  // Trạng thái cho form
  const [formData, setFormData] = useState<Partial<Category>>({
    name: '',
    description: '',
    slug: '',
    parentId: null,
    level: 1,
    image: {
      url: '',
      alt: ''
    },
    status: 'active',
    featured: false,
    order: 0,
    ...initialData
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [imagePreview, setImagePreview] = useState<string>(initialData?.image?.url || '');
  const [slugAutogenerated, setSlugAutogenerated] = useState<boolean>(!initialData?.slug);

  // Tự động tạo slug từ tên danh mục
  useEffect(() => {
    if (slugAutogenerated && formData.name) {
      const slugValue = formData.name
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/[đĐ]/g, 'd')
        .replace(/[^a-z0-9\s]/g, '')
        .replace(/\s+/g, '-');
      
      setFormData(prev => ({ ...prev, slug: slugValue }));
    }
  }, [formData.name, slugAutogenerated]);

  // Danh sách category để chọn danh mục cha (chỉ hiển thị các danh mục cấp 1 và 2)
  const parentCategoryOptions = categories
    .filter(cat => cat.level < 3 && (initialData?.id ? cat.id !== initialData.id : true))
    .sort((a, b) => a.level - b.level || a.name.localeCompare(b.name));

  // Xử lý khi thay đổi input
  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    // Xử lý checkbox
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({ ...prev, [name]: checked }));
      return;
    }
    
    // Xử lý số
    if (type === 'number') {
      setFormData(prev => ({ ...prev, [name]: parseInt(value) || 0 }));
      return;
    }
    
    // Xử lý khi thay đổi slug thủ công
    if (name === 'slug') {
      setSlugAutogenerated(false);
    }
    
    // Xử lý giá trị thông thường
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Xóa lỗi khi người dùng chỉnh sửa trường
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  // Xử lý khi thay đổi select
  const handleSelectChange = (e: ChangeEvent<HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    if (name === 'parentId') {
      const selectedCategory = value ? categories.find(cat => cat.id === value) : null;
      // Nếu chọn danh mục cha, tự động cập nhật level
      const newLevel = selectedCategory ? selectedCategory.level + 1 : 1;
      
      setFormData(prev => ({
        ...prev,
        [name]: value || null,
        level: newLevel
      }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  // Xử lý khi upload ảnh
  const handleImageUpload = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    // Trong thực tế, bạn sẽ upload file lên server
    // Ở đây, chúng ta chỉ tạo URL local để xem trước
    const imageUrl = URL.createObjectURL(file);
    setImagePreview(imageUrl);
    
    setFormData(prev => ({
      ...prev,
      image: {
        url: imageUrl,
        alt: prev.image?.alt || formData.name || 'Category image'
      }
    }));
  };

  // Xử lý khi xóa ảnh
  const handleRemoveImage = () => {
    setImagePreview('');
    setFormData(prev => ({
      ...prev,
      image: {
        url: '',
        alt: ''
      }
    }));
  };

  // Kiểm tra dữ liệu trước khi submit
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.name?.trim()) {
      newErrors.name = 'Tên danh mục không được để trống';
    }
    
    if (!formData.slug?.trim()) {
      newErrors.slug = 'Slug không được để trống';
    }
    
    if (!formData.description?.trim()) {
      newErrors.description = 'Mô tả không được để trống';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Xử lý khi submit form
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      onSubmit(formData);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="bg-white shadow-sm rounded-lg overflow-hidden">
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Tên danh mục */}
            <div className="col-span-1">
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                Tên danh mục <span className="text-red-500">*</span>
              </label>
              <input
                id="name"
                name="name"
                type="text"
                value={formData.name || ''}
                onChange={handleChange}
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 ${
                  errors.name ? 'border-red-500' : 'border-gray-300'
                }`}
              />
              {errors.name && (
                <p className="mt-1 text-sm text-red-500">{errors.name}</p>
              )}
            </div>

            {/* Slug */}
            <div className="col-span-1">
              <label htmlFor="slug" className="block text-sm font-medium text-gray-700 mb-1">
                Slug <span className="text-red-500">*</span>
              </label>
              <input
                id="slug"
                name="slug"
                type="text"
                value={formData.slug || ''}
                onChange={handleChange}
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 ${
                  errors.slug ? 'border-red-500' : 'border-gray-300'
                }`}
              />
              {errors.slug && (
                <p className="mt-1 text-sm text-red-500">{errors.slug}</p>
              )}
              <p className="mt-1 text-xs text-gray-500">
                {slugAutogenerated ? 'Tự động tạo từ tên danh mục' : 'Slug tùy chỉnh'}
              </p>
            </div>

            {/* Mô tả */}
            <div className="col-span-2">
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                Mô tả <span className="text-red-500">*</span>
              </label>
              <textarea
                id="description"
                name="description"
                rows={3}
                value={formData.description || ''}
                onChange={handleChange}
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 ${
                  errors.description ? 'border-red-500' : 'border-gray-300'
                }`}
              />
              {errors.description && (
                <p className="mt-1 text-sm text-red-500">{errors.description}</p>
              )}
            </div>

            {/* Danh mục cha */}
            <div className="col-span-1">
              <label htmlFor="parentId" className="block text-sm font-medium text-gray-700 mb-1">
                Danh mục cha
              </label>
              <select
                id="parentId"
                name="parentId"
                value={formData.parentId || ''}
                onChange={handleSelectChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500"
              >
                <option value="">Không có (Danh mục gốc)</option>
                {parentCategoryOptions.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.level > 1 ? '-- ' : ''}{category.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Cấp độ danh mục */}
            <div className="col-span-1">
              <label htmlFor="level" className="block text-sm font-medium text-gray-700 mb-1">
                Cấp độ danh mục
              </label>
              <input
                id="level"
                name="level"
                type="number"
                min="1"
                max="3"
                value={formData.level || 1}
                onChange={handleChange}
                disabled
                className="w-full px-4 py-2 border border-gray-300 rounded-md bg-gray-50 cursor-not-allowed"
              />
              <p className="mt-1 text-xs text-gray-500">
                Tự động dựa trên danh mục cha
              </p>
            </div>

            {/* Thứ tự hiển thị */}
            <div className="col-span-1">
              <label htmlFor="order" className="block text-sm font-medium text-gray-700 mb-1">
                Thứ tự hiển thị
              </label>
              <input
                id="order"
                name="order"
                type="number"
                min="0"
                value={formData.order || 0}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500"
              />
            </div>

            {/* Trạng thái */}
            <div className="col-span-1">
              <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
                Trạng thái
              </label>
              <select
                id="status"
                name="status"
                value={formData.status || 'active'}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500"
              >
                <option value="active">Hoạt động</option>
                <option value="inactive">Không hoạt động</option>
              </select>
            </div>

            {/* Nổi bật */}
            <div className="col-span-1">
              <div className="flex items-center">
                <input
                  id="featured"
                  name="featured"
                  type="checkbox"
                  checked={formData.featured || false}
                  onChange={(e) => setFormData(prev => ({ ...prev, featured: e.target.checked }))}
                  className="h-4 w-4 text-pink-600 focus:ring-pink-500 border-gray-300 rounded"
                />
                <label htmlFor="featured" className="ml-2 block text-sm font-medium text-gray-700">
                  Đánh dấu là danh mục nổi bật
                </label>
              </div>
            </div>

            {/* Upload hình ảnh */}
            <div className="col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Hình ảnh danh mục
              </label>
              
              <div className="mt-1 flex items-center space-x-4">
                {imagePreview ? (
                  <div className="relative w-24 h-24 rounded-md overflow-hidden border border-gray-300">
                    <Image 
                      src={imagePreview}
                      alt="Category preview"
                      width={96}
                      height={96}
                      className="w-full h-full object-cover"
                    />
                    <button
                      type="button"
                      onClick={handleRemoveImage}
                      className="absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 focus:outline-none"
                    >
                      <FiX className="h-3 w-3" />
                    </button>
                  </div>
                ) : (
                  <div className="w-24 h-24 border-2 border-dashed border-gray-300 rounded-md flex items-center justify-center">
                    <FiUpload className="h-6 w-6 text-gray-400" />
                  </div>
                )}
                
                <div>
                  <label htmlFor="image-upload" className="cursor-pointer bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none">
                    {imagePreview ? 'Thay đổi ảnh' : 'Tải ảnh lên'}
                  </label>
                  <input
                    id="image-upload"
                    name="image"
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="sr-only"
                  />
                  <p className="mt-1 text-xs text-gray-500">PNG, JPG, GIF tối đa 1MB</p>
                </div>
              </div>

              {imagePreview && (
                <div className="mt-3">
                  <label htmlFor="image-alt" className="block text-sm font-medium text-gray-700 mb-1">
                    Mô tả ảnh (alt)
                  </label>
                  <input
                    id="image-alt"
                    name="image-alt"
                    type="text"
                    value={(formData.image?.alt || '')}
                    onChange={(e) => setFormData(prev => ({ 
                      ...prev, 
                      image: { 
                        ...prev.image as any, 
                        alt: e.target.value 
                      } 
                    }))}
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500"
                    placeholder="Mô tả ngắn gọn về hình ảnh"
                  />
                </div>
              )}
            </div>
          </div>
        </div>
        
        <div className="px-6 py-4 bg-gray-50 flex justify-end space-x-3">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500"
          >
            Hủy
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-pink-600 hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? 'Đang xử lý...' : (initialData?.id ? 'Cập nhật' : 'Tạo mới')}
          </button>
        </div>
      </div>
    </form>
  );
} 