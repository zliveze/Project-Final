import { useState, useEffect, ChangeEvent } from 'react';
import Image from 'next/image';
import { FiUpload, FiTrash2, FiLock, FiCheck, FiX } from 'react-icons/fi';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { Category } from '@/contexts/CategoryContext';
import toast from 'react-hot-toast';

interface CategoryFormProps {
  initialData?: Partial<Category>;
  categories: Category[];
  onSubmit: (data: Partial<Category>) => void;
  onCancel: () => void;
  isSubmitting?: boolean;
}

interface CategoryFormValues {
  name: string;
  description: string;
  slug: string;
  parentId: string | undefined;
  level: number;
  image: {
    url: string;
    alt: string | undefined;
    publicId?: string;
  } | null;
  status: string;
  featured: boolean;
  order: number;
  imageData?: string;
}

// Validation Schema for CategoryForm
const validationSchema = Yup.object({
  name: Yup.string().required('Tên danh mục không được để trống'),
  slug: Yup.string().required('Slug không được để trống'),
  description: Yup.string().required('Mô tả không được để trống'),
});

export default function CategoryForm({
  initialData,
  categories,
  onSubmit,
  onCancel,
  isSubmitting = false
}: CategoryFormProps) {
  // Hàm chuyển từ category sang dữ liệu form
  const mapCategoryToFormValues = (category: Partial<Category> | undefined | null): CategoryFormValues => {
    if (!category) {
      return {
        name: '',
        description: '',
        slug: '',
        parentId: undefined,
        level: 1,
        image: null,
        status: 'active',
        featured: false,
        order: 0,
      };
    }

    return {
      name: category.name || '',
      description: category.description || '',
      slug: category.slug || '',
      parentId: category.parentId || undefined,
      level: category.level || 1,
      image: category.image ? {
        url: category.image.url || '',
        alt: category.image.alt || '',
        publicId: category.image.publicId
      } : null,
      status: category.status || 'active',
      featured: category.featured || false,
      order: category.order || 0,
    };
  };

  const initialValues = mapCategoryToFormValues(initialData);
  const [imagePreview, setImagePreview] = useState<string>(initialData?.image?.url || '');
  const [slugAutogenerated, setSlugAutogenerated] = useState<boolean>(!initialData?.slug);

  // Kiểm tra xem danh mục có tham chiếu đến chính nó hoặc con cháu của nó không
  const isSelfOrDescendant = (
    categoryId: string | undefined,
    potentialParentId: string | undefined,
    categories: Category[]
  ): boolean => {
    if (!categoryId || !potentialParentId) return false;
    if (categoryId === potentialParentId) return true;

    const findDescendants = (id: string): string[] => {
      const children = categories.filter(cat => cat.parentId === id).map(cat => cat._id || '');
      let descendants = [...children];
      children.forEach(childId => {
        descendants = [...descendants, ...findDescendants(childId)];
      });
      return descendants;
    };

    const descendants = findDescendants(categoryId);
    return descendants.includes(potentialParentId);
  };

  // Xử lý khi upload ảnh
  const handleImageUpload = (setFieldValue: any, e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    console.log('Đã chọn file ảnh:', file.name, file.type, `${(file.size / 1024).toFixed(2)} KB`);
    
    // Tạo URL local để xem trước
    const imageUrl = URL.createObjectURL(file);
    setImagePreview(imageUrl);
    
    // Đọc file và chuyển đổi thành base64 để lưu trữ tạm thời và
    // chuẩn bị cho việc gửi lên server
    const reader = new FileReader();
    reader.onloadend = () => {
      const base64String = reader.result as string;
      
      // Lưu URL local trong URL để hiển thị và base64 trong dữ liệu để gửi đi
      setFieldValue('image', {
        url: imageUrl, // URL local để hiển thị ảnh preview
        alt: initialData?.image?.alt || initialData?.name || 'Category image'
      });
      
      // Thêm dữ liệu base64 để lưu trữ tạm thời và gửi lên server
      // Khi submit form, imageData sẽ được truyền lên component cha
      setFieldValue('imageData', base64String);
      
      console.log('Đã chuyển đổi ảnh thành base64 thành công');
    };
    reader.readAsDataURL(file);
  };

  // Xử lý khi xóa ảnh
  const handleRemoveImage = (setFieldValue: any) => {
    setImagePreview('');
    setFieldValue('image', null);
    setFieldValue('imageData', undefined);
    console.log('Đã xóa hình ảnh và dữ liệu base64');
  };

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={(values: any) => {
        // Chuyển đổi giá trị từ CategoryFormValues sang Partial<Category>
        const categoryData: Partial<Category> & { imageData?: string } = {
          ...values,
          image: values.image || undefined,
          // Bao gồm dữ liệu hình ảnh base64 nếu có
          imageData: values.imageData
        };
        
        console.log('Submit form với dữ liệu:', {
          ...categoryData,
          imageData: categoryData.imageData ? '[base64 data]' : undefined
        });
        
        onSubmit(categoryData);
      }}
      enableReinitialize
    >
      {({ values, errors, touched, handleChange, handleBlur, handleSubmit, setFieldValue }) => (
        <Form onSubmit={handleSubmit} className="space-y-6">
          <div className="bg-white shadow-sm rounded-lg overflow-hidden">
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Tên danh mục */}
                <div className="col-span-1">
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                    Tên danh mục <span className="text-red-500">*</span>
                  </label>
                  <Field
                    id="name"
                    name="name"
                    type="text"
                    className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 ${
                      errors.name && touched.name ? 'border-red-500' : 'border-gray-300'
                    }`}
                    onChange={(e: ChangeEvent<HTMLInputElement>) => {
                      handleChange(e);
                      // Nếu slug tự động tạo, cập nhật slug khi tên thay đổi
                      if (slugAutogenerated) {
                        const slugValue = e.target.value
                          .toLowerCase()
                          .normalize('NFD')
                          .replace(/[\u0300-\u036f]/g, '')
                          .replace(/[đĐ]/g, 'd')
                          .replace(/[^a-z0-9\s]/g, '')
                          .replace(/\s+/g, '-');
                        setFieldValue('slug', slugValue);
                      }
                    }}
                  />
                  <ErrorMessage name="name" component="p" className="mt-1 text-sm text-red-500" />
                </div>

                {/* Slug */}
                <div className="col-span-1">
                  <label htmlFor="slug" className="block text-sm font-medium text-gray-700 mb-1">
                    Slug <span className="text-red-500">*</span>
                  </label>
                  <Field
                    id="slug"
                    name="slug"
                    type="text"
                    className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 ${
                      errors.slug && touched.slug ? 'border-red-500' : 'border-gray-300'
                    }`}
                    onChange={(e: ChangeEvent<HTMLInputElement>) => {
                      handleChange(e);
                      setSlugAutogenerated(false);
                    }}
                  />
                  <ErrorMessage name="slug" component="p" className="mt-1 text-sm text-red-500" />
                  <p className="mt-1 text-xs text-gray-500">
                    {slugAutogenerated ? 'Tự động tạo từ tên danh mục' : 'Slug tùy chỉnh'}
                  </p>
                </div>

                {/* Mô tả */}
                <div className="col-span-2">
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                    Mô tả <span className="text-red-500">*</span>
                  </label>
                  <Field
                    as="textarea"
                    id="description"
                    name="description"
                    rows={3}
                    className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500 ${
                      errors.description && touched.description ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                  <ErrorMessage name="description" component="p" className="mt-1 text-sm text-red-500" />
                </div>

                {/* Danh mục cha */}
                <div className="col-span-1">
                  <label htmlFor="parentId" className="block text-sm font-medium text-gray-700 mb-1">
                    Danh mục cha
                  </label>
                  <Field
                    as="select"
                    name="parentId"
                    id="parentId"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    onChange={(e: ChangeEvent<HTMLSelectElement>) => {
                      handleChange(e);
                      const selectedCategoryId = e.target.value;
                      const selectedCategory = selectedCategoryId 
                        ? categories.find(cat => cat._id === selectedCategoryId) 
                        : null;
                      // Nếu chọn danh mục cha, tự động cập nhật level
                      const newLevel = selectedCategory ? selectedCategory.level + 1 : 1;
                      setFieldValue('level', newLevel);
                    }}
                  >
                    <option value="">-- Không có danh mục cha --</option>
                    {categories
                      .filter(cat => !initialData?._id || !isSelfOrDescendant(initialData._id, cat._id, categories))
                      .map(category => (
                        <option key={category._id} value={category._id}>
                          {category.name} {category.level > 1 ? `(Cấp ${category.level})` : '(Cấp 1)'}
                        </option>
                      ))}
                  </Field>
                  <ErrorMessage name="parentId" component="div" className="mt-1 text-sm text-red-600" />
                </div>

                {/* Cấp độ danh mục */}
                <div className="col-span-1">
                  <label htmlFor="level" className="block text-sm font-medium text-gray-700 mb-1">
                    Cấp độ danh mục
                  </label>
                  <Field
                    id="level"
                    name="level"
                    type="number"
                    min="1"
                    max="3"
                    disabled
                    className="w-full px-4 py-2 border border-gray-300 rounded-md bg-gray-50 cursor-not-allowed"
                  />
                  <p className="mt-1 text-xs text-gray-500">
                    Tự động dựa trên danh mục cha
                  </p>
                </div>

                {/* Thứ tự hiển thị */}
                <div className="col-span-1">
                  <label htmlFor="order" className="block text-sm font-medium text-gray-700 mb-1">
                    Thứ tự hiển thị
                  </label>
                  <Field
                    id="order"
                    name="order"
                    type="number"
                    min="0"
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500"
                  />
                </div>

                {/* Trạng thái */}
                <div className="col-span-1">
                  <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
                    Trạng thái
                  </label>
                  <Field
                    as="select"
                    id="status"
                    name="status"
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500"
                  >
                    <option value="active">Hoạt động</option>
                    <option value="inactive">Không hoạt động</option>
                  </Field>
                </div>

                {/* Nổi bật */}
                <div className="col-span-1">
                  <div className="flex items-center">
                    <Field
                      id="featured"
                      name="featured"
                      type="checkbox"
                      className="h-4 w-4 text-pink-600 focus:ring-pink-500 border-gray-300 rounded"
                    />
                    <label htmlFor="featured" className="ml-2 block text-sm font-medium text-gray-700">
                      Đánh dấu là danh mục nổi bật
                    </label>
                  </div>
                </div>

                {/* Upload hình ảnh */}
                <div className="col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Hình ảnh danh mục
                  </label>
                  
                  <div className="mt-1 flex items-center space-x-4">
                    {imagePreview ? (
                      <div className="relative w-24 h-24 rounded-md overflow-hidden border border-gray-300">
                        <Image 
                          src={imagePreview}
                          alt="Category preview"
                          width={96}
                          height={96}
                          className="w-full h-full object-cover"
                        />
                        <button
                          type="button"
                          onClick={() => handleRemoveImage(setFieldValue)}
                          className="absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 focus:outline-none"
                        >
                          <FiX className="h-3 w-3" />
                        </button>
                      </div>
                    ) : (
                      <div className="w-24 h-24 border-2 border-dashed border-gray-300 rounded-md flex items-center justify-center">
                        <FiUpload className="h-6 w-6 text-gray-400" />
                      </div>
                    )}
                    
                    <div>
                      <label htmlFor="image-upload" className="cursor-pointer bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none">
                        {imagePreview ? 'Thay đổi ảnh' : 'Tải ảnh lên'}
                      </label>
                      <input
                        id="image-upload"
                        name="image"
                        type="file"
                        accept="image/*"
                        onChange={(e) => handleImageUpload(setFieldValue, e)}
                        className="sr-only"
                      />
                      <p className="mt-1 text-xs text-gray-500">PNG, JPG, GIF tối đa 1MB</p>
                    </div>
                  </div>

                  {imagePreview && (
                    <div className="mt-3">
                      <label htmlFor="image.alt" className="block text-sm font-medium text-gray-700 mb-1">
                        Mô tả ảnh (alt)
                      </label>
                      <Field
                        id="image.alt"
                        name="image.alt"
                        type="text"
                        className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500"
                        placeholder="Mô tả ngắn gọn về hình ảnh"
                      />
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            <div className="px-6 py-4 bg-gray-50 flex justify-end space-x-3">
              <button
                type="button"
                onClick={onCancel}
                className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500"
              >
                Hủy
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-pink-600 hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isSubmitting ? 'Đang xử lý...' : (initialData?._id ? 'Cập nhật' : 'Tạo mới')}
              </button>
            </div>
          </div>
        </Form>
      )}
    </Formik>
  );
} 